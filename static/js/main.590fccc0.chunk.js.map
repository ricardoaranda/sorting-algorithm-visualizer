{"version":3,"sources":["styled/styled.js","context/BarContext.js","components/bars/bar/Bar.jsx","components/bars/Bars.jsx","components/layout/Layout.jsx","components/input/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledApp","styled","div","StyledAppHeader","StyledLayout","StyledBars","StyledButton","Button","SortButton","StopButton","StyledSelect","Select","StyledFormControl","FormControl","BarContext","createContext","Bar","props","val","max","min","style","display","backgroundColor","selected","color","margin","width","height","number","Bars","value","useContext","barArray","map","index","key","Layout","size","arraySize","Input","StylesProvider","injectFirst","variant","type","onChange","handler","disabled","option","Array","i","maxSize","push","optionArray","isRunning","App","useState","setArraySize","useEffect","array","setBarArray","swap","arr","firstIndex","secondIndex","Promise","resolve","reject","setTimeout","temp","next","barIndex","setBarIndex","event","input","target","onClick","length","j","Math","floor","random","a","async","len","stop","console","log","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.590fccc0.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst headerHeight = '55px';\n\nexport const StyledApp = styled.div `\n    position: relative;\n    text-align: center;\n    background-color: rgb(30, 30, 30);\n    height: 100%;\n    color: rgb(212, 212, 212);\n`;\n\nexport const StyledAppHeader = styled.div `\n    display: block;\n    height: ${headerHeight};\n`;\n\nexport const StyledLayout = styled.div `\n    display: block;\n    height: 800px;\n    margin: 0 auto;\n`;\n\nexport const StyledBars = styled.div `\n    display: flex;\n    /* border: 2px blue solid; */\n    height: 100%;\n    justify-content: center;\n    align-items: stretch;\n`;\n\nexport const StyledBar = styled.div `\n    display: inline-block;\n    background-color: rgb(196, 133, 191);\n    color: rgb(212, 212, 212);\n    margin: 0 2px;\n    width: 10px;\n`;\n\nexport const StyledInput = styled.div `\n    display: inline-block;\n    padding: 0px 0px;\n`;\n\nexport const StyledButton = styled(Button)`\n    margin: 11px 5px;\n\n    color: rgb(212,212,212);\n    border-color: rgb(212,212,212);\n    transition: color 0.3s linear;\n    -webkit-transition: color 0.3s linear;\n    -moz-transition: color 0.3s linear;\n    &:hover {\n        color: rgb(255,255,255);\n    }\n`;\n\nexport const SortButton = styled(StyledButton)`\n\n`;\n\nexport const StopButton = styled(StyledButton)`\n`;\n\nexport const StyledSelect = styled(Select) `\n    margin: 11px 5px;\n    padding: 0px 0px;\n    height: 30px;\n\n    color: rgb(212,212,212);\n    /* border-color: rgb(212,212,212); */\n    border: 1px solid rgb(212,212,212);\n    transition: color 0.3s linear;\n    -webkit-transition: color 0.3s linear;\n    -moz-transition: color 0.3s linear;\n    &:hover {\n        color: rgb(255,255,255);\n    }\n\n`;\n\nexport const StyledFormControl = styled(FormControl)`\n    /* margin: 11px 5px; */\n`;","import { createContext } from 'react'\n\nexport const BarContext = createContext(null);\n","import React from 'react';\n// import { BarContext } from '../../../context/BarContext';\n\nfunction Bar(props) {\n    // const value = useContext(BarContext);\n\n    function normalize(val, max, min) { \n        let a = 3;\n        let b = 100;\n        if(max - min === 0) return 1; \n        return min + (val - a) * (max - min) / (b - a); \n    }\n\n    let style = {\n        display: 'inline-block',\n        backgroundColor: `${props.selected ? 'rgb(150, 220, 250)' : 'rgb(196, 133, 191)'}`,\n        color: 'rrgb(212, 212, 212)',\n        margin: '0 2px',\n        width: '10px',\n        height: `${normalize(props.number, 800, 50)}px`\n      };\n\n    return (\n        <div style={style}></div>\n    );\n}\n\nexport default Bar;\n","import React, { useContext } from 'react';\n\nimport { StyledBars } from '../../styled/styled';\nimport { BarContext } from '../../context/BarContext';\n\nimport Bar from './bar/Bar';\n\nfunction Bars(props) {\n    const value = useContext(BarContext);\n\n    return (\n        <StyledBars>\n            {props.barArray.map((number, index) => {\n                if (index === value) {\n                    return <Bar number={number} key={number} selected={true}/>;\n                }\n                return <Bar number={number} key={number} selected={false} />;\n            })}\n        </StyledBars>\n    );\n}\n\nexport default Bars;\n","import React from 'react';\nimport { StyledLayout } from '../../styled/styled';\n\nimport Bars from '../bars/Bars';\n\nfunction Layout(props) {\n    return (\n        <StyledLayout>\n            <Bars barArray={props.barArray} size={props.arraySize} />\n        </StyledLayout>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport {StyledInput, StyledSelect, StyledFormControl } from '../../styled/styled';\nimport { StylesProvider } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\n\nfunction Input(props) {\n    let optionArray = () => {\n        let option = new Array(props.arraySize);\n\n        for (let i = 10; i < props.maxSize + 1; i += 10) {\n            option.push(<option value={i} key={i}>{i}</option>);\n        }\n\n        return option;\n    }\n\n    return (\n        <StylesProvider injectFirst>\n            <StyledFormControl variant=\"outlined\" size=\"small\">    \n                <StyledSelect type=\"number\" onChange={props.handler} value={props.arraySize} disabled={props.disabled}>\n                    {optionArray()}\n                </StyledSelect>\n            </StyledFormControl>\n        </StylesProvider>\n    );\n}\n\nexport default Input;\n","import React, { useState, useEffect }  from 'react';\nimport { StyledApp, StyledAppHeader, StyledButton, SortButton, StopButton } from '../src/styled/styled';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport Layout from '../src/components/layout/Layout';\nimport Input from '../src/components/input/Input';\nimport { BarContext } from './context/BarContext';\n\nlet isRunning = false;  // mutable global variable needs to be accessible by asyc function\nfunction App() {\n  /*\n  * state and effects\n  */\n  let maxSize = 100;\n  const [arraySize, setArraySize] = useState(50);\n  useEffect(() => {\n  }, [arraySize]);\n\n  const [barArray, setBarArray] = useState(() => {\n      let array = [];\n\n      for (let i = 0; i < arraySize; i++) {\n          array.push(i);\n      }\n\n      return array;\n  });\n  useEffect(() => {\n    setBarArray(() => {\n        let array = [];\n        for (let i = 0; i < arraySize; i++) {\n            array.push(i);\n        }\n        return array;\n    });\n  }, [arraySize]);\n\n  /*\n  * handler functions:\n  * shuffle, bubble sort\n  */\n  const newInputHandler = (event) => {\n    let input = event.target.value;\n    setArraySize(() => input);\n    isRunning = false;\n  }\n\n  const shuffle = () => {\n    setBarArray(() => {\n      for (let i = barArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [barArray[i], barArray[j]] = [barArray[j], barArray[i]];\n      }\n      return [...barArray];\n    });\n  }\n\n  let millisecords = 10;\n\n  const swap = (arr, firstIndex, secondIndex) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let temp = arr[firstIndex];\n        arr[firstIndex] = arr[secondIndex];\n        arr[secondIndex] = temp;\n        setBarArray(() => [...arr]);\n        resolve(arr);\n      }, millisecords);\n    });\n  }\n\n  const next = (arr) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        setBarArray([...arr]);\n        resolve(arr);\n      }, millisecords);\n    });\n  }\n\n  let [barIndex, setBarIndex] = useState(null);\n  const bubbleSort = async () => {\n    if (isRunning) {\n      return;\n    }\n    isRunning = true;\n    let len = barArray.length, i, stop;\n      for (i=0; i < len; i++) {\n        for (barIndex = 0, stop = len - i; barIndex < stop; barIndex++) {\n          if (!isRunning) {\n            setBarIndex(null);\n            return;\n          }\n          // color selected element\n          setBarIndex(() => barIndex);\n          // swap \n          if (barArray[barIndex] > barArray[barIndex+1]) {\n            try {\n              await swap(barArray, barIndex, barIndex+1);\n            }\n            catch(e) {\n              console.log(\"error swapping?\", e);\n            }\n          }\n          else {\n            try {\n              await next(barArray);\n            }\n            catch(e) {\n              console.log(e);\n            }\n          }\n        }\n      }\n      isRunning = false;\n      setBarIndex(null);\n  }\n\n  const stopHandler = () => {\n    isRunning = false;\n  }\n  \n  return (\n    <StyledApp>\n      <StyledAppHeader>\n      <StylesProvider injectFirst={true}>\n        <Input arraySize={arraySize} handler={newInputHandler} maxSize={maxSize} disabled={isRunning ? true : false}/>\n        <StyledButton size=\"small\" variant=\"outlined\" onClick={shuffle} disabled={isRunning ? true : false}>Shuffle</StyledButton>\n        <SortButton size=\"small\" variant=\"outlined\" onClick={bubbleSort}>Sort</SortButton>\n        <StopButton size=\"small\" variant=\"outlined\" onClick={stopHandler}>Stop</StopButton>\n      </StylesProvider>\n      </StyledAppHeader>\n      <BarContext.Provider value={barIndex}>\n        <Layout barArray={barArray} arraySize={arraySize} />\n      </BarContext.Provider>\n    </StyledApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}